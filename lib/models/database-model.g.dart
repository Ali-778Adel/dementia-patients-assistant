// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'database-model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:RepeatableMissionsTable.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// RepeatableMissionsTable TABLE
class TableRepeatableMissionsTable extends SqfEntityTableBase {
  TableRepeatableMissionsTable() {
    // declare properties of EntityTable
    tableName = 'repeatableMissionsTable';
    primaryKeyName = 'repeatableMissionId';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('missionName', DbType.text),
      SqfEntityFieldBase('missionTime', DbType.text),
      SqfEntityFieldBase('missionDate', DbType.text),
      SqfEntityFieldBase('missionRepeat', DbType.text),
      SqfEntityFieldBase('missionDescription', DbType.text),
      SqfEntityFieldBase('missionLocationName', DbType.text),
      SqfEntityFieldBase('missionLocationId', DbType.text),
      SqfEntityFieldBase('missionLocationLat', DbType.text),
      SqfEntityFieldBase('missionLocationLng', DbType.text),
      SqfEntityFieldBase('missionRecordPath', DbType.text),
      SqfEntityFieldBase('completed', DbType.bool, defaultValue: false),
      SqfEntityFieldBase('archived', DbType.bool, defaultValue: false),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableRepeatableMissionsTable();
  }
}

// WeekdaysMission TABLE
class TableWeekdaysMission extends SqfEntityTableBase {
  TableWeekdaysMission() {
    // declare properties of EntityTable
    tableName = 'weekdaysMissions';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('weekdayName', DbType.text),
      SqfEntityFieldBase('missionName', DbType.text),
      SqfEntityFieldBase('missionTime', DbType.text),
      SqfEntityFieldBase('missionDate', DbType.text),
      SqfEntityFieldBase('missionLocationId', DbType.text),
      SqfEntityFieldBase('missionLocationName', DbType.text),
      SqfEntityFieldBase('missionLocationLat', DbType.text),
      SqfEntityFieldBase('missionLocationLng', DbType.text),
      SqfEntityFieldBase('missionDescription', DbType.text),
      SqfEntityFieldBase('missionRecordPath', DbType.text),
      SqfEntityFieldBase('completed', DbType.bool, defaultValue: false),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableWeekdaysMission();
  }
}

// FaceDataTable TABLE
class TableFaceDataTable extends SqfEntityTableBase {
  TableFaceDataTable() {
    // declare properties of EntityTable
    tableName = 'faceDataTable';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('facePoints', DbType.text),
      SqfEntityFieldBase('leftEyebrowTop', DbType.text),
      SqfEntityFieldBase('leftEyebrowBottom', DbType.text),
      SqfEntityFieldBase('rightEyebrowTop', DbType.text),
      SqfEntityFieldBase('rightEyebrowBottom', DbType.text),
      SqfEntityFieldBase('leftEye', DbType.text),
      SqfEntityFieldBase('rightEye', DbType.text),
      SqfEntityFieldBase('upperLipTop', DbType.text),
      SqfEntityFieldBase('lowerLipTop', DbType.text),
      SqfEntityFieldBase('noseBridge', DbType.text),
      SqfEntityFieldBase('noseBottom', DbType.text),
      SqfEntityFieldBase('leftCheek', DbType.text),
      SqfEntityFieldBase('rightCheek', DbType.text),
      SqfEntityFieldBase('userName', DbType.text),
      SqfEntityFieldBase('userRelation ', DbType.text),
      SqfEntityFieldBase('completed', DbType.bool, defaultValue: false),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableFaceDataTable();
  }
}
// END TABLES

// BEGIN SEQUENCES
// identity SEQUENCE
class SequenceIdentitySequence extends SqfEntitySequenceBase {
  SequenceIdentitySequence() {
    sequenceName = 'identity';
    maxValue =
        9007199254740991; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 0; /* optional. default is 0 */
    super.init();
  }
  static SequenceIdentitySequence? _instance;
  static SequenceIdentitySequence get getInstance {
    return _instance = _instance ?? SequenceIdentitySequence();
  }
}
// END SEQUENCES

// BEGIN DATABASE MODEL
class MyAppDatabaseModel extends SqfEntityModelProvider {
  MyAppDatabaseModel() {
    databaseName = myDbModel.databaseName;
    password = myDbModel.password;
    dbVersion = myDbModel.dbVersion;
    preSaveAction = myDbModel.preSaveAction;
    logFunction = myDbModel.logFunction;
    databaseTables = [
      TableRepeatableMissionsTable.getInstance,
      TableWeekdaysMission.getInstance,
      TableFaceDataTable.getInstance,
    ];

    sequences = [
      SequenceIdentitySequence.getInstance,
    ];

    bundledDatabasePath = myDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = myDbModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region RepeatableMissionsTable
class RepeatableMissionsTable extends TableBase {
  RepeatableMissionsTable(
      {this.repeatableMissionId,
      this.missionName,
      this.missionTime,
      this.missionDate,
      this.missionRepeat,
      this.missionDescription,
      this.missionLocationName,
      this.missionLocationId,
      this.missionLocationLat,
      this.missionLocationLng,
      this.missionRecordPath,
      this.completed,
      this.archived,
      this.isDeleted}) {
    _setDefaultValues();
    softDeleteActivated = true;
  }
  RepeatableMissionsTable.withFields(
      this.missionName,
      this.missionTime,
      this.missionDate,
      this.missionRepeat,
      this.missionDescription,
      this.missionLocationName,
      this.missionLocationId,
      this.missionLocationLat,
      this.missionLocationLng,
      this.missionRecordPath,
      this.completed,
      this.archived,
      this.isDeleted) {
    _setDefaultValues();
  }
  RepeatableMissionsTable.withId(
      this.repeatableMissionId,
      this.missionName,
      this.missionTime,
      this.missionDate,
      this.missionRepeat,
      this.missionDescription,
      this.missionLocationName,
      this.missionLocationId,
      this.missionLocationLat,
      this.missionLocationLng,
      this.missionRecordPath,
      this.completed,
      this.archived,
      this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  RepeatableMissionsTable.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    repeatableMissionId = int.tryParse(o['repeatableMissionId'].toString());
    if (o['missionName'] != null) {
      missionName = o['missionName'].toString();
    }
    if (o['missionTime'] != null) {
      missionTime = o['missionTime'].toString();
    }
    if (o['missionDate'] != null) {
      missionDate = o['missionDate'].toString();
    }
    if (o['missionRepeat'] != null) {
      missionRepeat = o['missionRepeat'].toString();
    }
    if (o['missionDescription'] != null) {
      missionDescription = o['missionDescription'].toString();
    }
    if (o['missionLocationName'] != null) {
      missionLocationName = o['missionLocationName'].toString();
    }
    if (o['missionLocationId'] != null) {
      missionLocationId = o['missionLocationId'].toString();
    }
    if (o['missionLocationLat'] != null) {
      missionLocationLat = o['missionLocationLat'].toString();
    }
    if (o['missionLocationLng'] != null) {
      missionLocationLng = o['missionLocationLng'].toString();
    }
    if (o['missionRecordPath'] != null) {
      missionRecordPath = o['missionRecordPath'].toString();
    }
    if (o['completed'] != null) {
      completed = o['completed'].toString() == '1' ||
          o['completed'].toString() == 'true';
    }
    if (o['archived'] != null) {
      archived =
          o['archived'].toString() == '1' || o['archived'].toString() == 'true';
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (RepeatableMissionsTable)
  int? repeatableMissionId;
  String? missionName;
  String? missionTime;
  String? missionDate;
  String? missionRepeat;
  String? missionDescription;
  String? missionLocationName;
  String? missionLocationId;
  String? missionLocationLat;
  String? missionLocationLng;
  String? missionRecordPath;
  bool? completed;
  bool? archived;
  bool? isDeleted;

  // end FIELDS (RepeatableMissionsTable)

  static const bool _softDeleteActivated = true;
  RepeatableMissionsTableManager? __mnRepeatableMissionsTable;

  RepeatableMissionsTableManager get _mnRepeatableMissionsTable {
    return __mnRepeatableMissionsTable =
        __mnRepeatableMissionsTable ?? RepeatableMissionsTableManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['repeatableMissionId'] = repeatableMissionId;
    if (missionName != null || !forView) {
      map['missionName'] = missionName;
    }
    if (missionTime != null || !forView) {
      map['missionTime'] = missionTime;
    }
    if (missionDate != null || !forView) {
      map['missionDate'] = missionDate;
    }
    if (missionRepeat != null || !forView) {
      map['missionRepeat'] = missionRepeat;
    }
    if (missionDescription != null || !forView) {
      map['missionDescription'] = missionDescription;
    }
    if (missionLocationName != null || !forView) {
      map['missionLocationName'] = missionLocationName;
    }
    if (missionLocationId != null || !forView) {
      map['missionLocationId'] = missionLocationId;
    }
    if (missionLocationLat != null || !forView) {
      map['missionLocationLat'] = missionLocationLat;
    }
    if (missionLocationLng != null || !forView) {
      map['missionLocationLng'] = missionLocationLng;
    }
    if (missionRecordPath != null || !forView) {
      map['missionRecordPath'] = missionRecordPath;
    }
    if (completed != null) {
      map['completed'] = forQuery ? (completed! ? 1 : 0) : completed;
    } else if (completed != null || !forView) {
      map['completed'] = null;
    }
    if (archived != null) {
      map['archived'] = forQuery ? (archived! ? 1 : 0) : archived;
    } else if (archived != null || !forView) {
      map['archived'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['repeatableMissionId'] = repeatableMissionId;
    if (missionName != null || !forView) {
      map['missionName'] = missionName;
    }
    if (missionTime != null || !forView) {
      map['missionTime'] = missionTime;
    }
    if (missionDate != null || !forView) {
      map['missionDate'] = missionDate;
    }
    if (missionRepeat != null || !forView) {
      map['missionRepeat'] = missionRepeat;
    }
    if (missionDescription != null || !forView) {
      map['missionDescription'] = missionDescription;
    }
    if (missionLocationName != null || !forView) {
      map['missionLocationName'] = missionLocationName;
    }
    if (missionLocationId != null || !forView) {
      map['missionLocationId'] = missionLocationId;
    }
    if (missionLocationLat != null || !forView) {
      map['missionLocationLat'] = missionLocationLat;
    }
    if (missionLocationLng != null || !forView) {
      map['missionLocationLng'] = missionLocationLng;
    }
    if (missionRecordPath != null || !forView) {
      map['missionRecordPath'] = missionRecordPath;
    }
    if (completed != null) {
      map['completed'] = forQuery ? (completed! ? 1 : 0) : completed;
    } else if (completed != null || !forView) {
      map['completed'] = null;
    }
    if (archived != null) {
      map['archived'] = forQuery ? (archived! ? 1 : 0) : archived;
    } else if (archived != null || !forView) {
      map['archived'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [RepeatableMissionsTable]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [RepeatableMissionsTable]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      missionName,
      missionTime,
      missionDate,
      missionRepeat,
      missionDescription,
      missionLocationName,
      missionLocationId,
      missionLocationLat,
      missionLocationLng,
      missionRecordPath,
      completed,
      archived,
      isDeleted
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      repeatableMissionId,
      missionName,
      missionTime,
      missionDate,
      missionRepeat,
      missionDescription,
      missionLocationName,
      missionLocationId,
      missionLocationLat,
      missionLocationLng,
      missionRecordPath,
      completed,
      archived,
      isDeleted
    ];
  }

  static Future<List<RepeatableMissionsTable>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR RepeatableMissionsTable.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<RepeatableMissionsTable>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <RepeatableMissionsTable>[];
    try {
      objList = list
          .map((repeatablemissionstable) => RepeatableMissionsTable.fromMap(
              repeatablemissionstable as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR RepeatableMissionsTable.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<RepeatableMissionsTable>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<RepeatableMissionsTable> objList = <RepeatableMissionsTable>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = RepeatableMissionsTable.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns RepeatableMissionsTable by ID if exist, otherwise returns null
  /// Primary Keys: int? repeatableMissionId
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [RepeatableMissionsTable] if exist, otherwise returns null
  Future<RepeatableMissionsTable?> getById(int? repeatableMissionId,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (repeatableMissionId == null) {
      return null;
    }
    RepeatableMissionsTable? obj;
    final data =
        await _mnRepeatableMissionsTable.getById([repeatableMissionId]);
    if (data.length != 0) {
      obj = RepeatableMissionsTable.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (RepeatableMissionsTable) object. If the repeatableMissionId field is null, saves as a new record and returns new repeatableMissionId, if repeatableMissionId is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns repeatableMissionId
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (repeatableMissionId == null || repeatableMissionId == 0) {
      repeatableMissionId =
          await _mnRepeatableMissionsTable.insert(this, ignoreBatch);
    } else {
      await _mnRepeatableMissionsTable.update(this);
    }

    return repeatableMissionId;
  }

  /// Saves the (RepeatableMissionsTable) object. If the repeatableMissionId field is null, saves as a new record and returns new repeatableMissionId, if repeatableMissionId is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns repeatableMissionId
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (repeatableMissionId == null || repeatableMissionId == 0) {
      repeatableMissionId =
          await _mnRepeatableMissionsTable.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // repeatableMissionId= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnRepeatableMissionsTable.updateOrThrow(this);
    }

    return repeatableMissionId;
  }

  /// saveAs RepeatableMissionsTable. Returns a new Primary Key value of RepeatableMissionsTable

  /// <returns>Returns a new Primary Key value of RepeatableMissionsTable
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    repeatableMissionId = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<RepeatableMissionsTable> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<RepeatableMissionsTable> repeatablemissionstables,
      {bool? exclusive,
      bool? noResult,
      bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyAppDatabaseModel().batchStart();
    for (final obj in repeatablemissionstables) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyAppDatabaseModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < repeatablemissionstables.length; i++) {
        if (repeatablemissionstables[i].repeatableMissionId == null) {
          repeatablemissionstables[i].repeatableMissionId = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns repeatableMissionId
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnRepeatableMissionsTable.rawInsert(
          'INSERT OR REPLACE INTO repeatableMissionsTable (repeatableMissionId, missionName, missionTime, missionDate, missionRepeat, missionDescription, missionLocationName, missionLocationId, missionLocationLat, missionLocationLng, missionRecordPath, completed, archived,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            repeatableMissionId,
            missionName,
            missionTime,
            missionDate,
            missionRepeat,
            missionDescription,
            missionLocationName,
            missionLocationId,
            missionLocationLat,
            missionLocationLng,
            missionRecordPath,
            completed,
            archived,
            isDeleted
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage:
                'RepeatableMissionsTable repeatableMissionId=$repeatableMissionId updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage:
                'RepeatableMissionsTable repeatableMissionId=$repeatableMissionId did not update');
      }
      return repeatableMissionId;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage:
              'RepeatableMissionsTable Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<RepeatableMissionsTable>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(
      List<RepeatableMissionsTable> repeatablemissionstables,
      {bool? exclusive,
      bool? noResult,
      bool? continueOnError}) async {
    final results = await _mnRepeatableMissionsTable.rawInsertAll(
        'INSERT OR REPLACE INTO repeatableMissionsTable (repeatableMissionId, missionName, missionTime, missionDate, missionRepeat, missionDescription, missionLocationName, missionLocationId, missionLocationLat, missionLocationLng, missionRecordPath, completed, archived,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
        repeatablemissionstables,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes RepeatableMissionsTable

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint(
        'SQFENTITIY: delete RepeatableMissionsTable invoked (repeatableMissionId=$repeatableMissionId)');
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnRepeatableMissionsTable.delete(QueryParams(
          whereString: 'repeatableMissionId=?',
          whereArguments: [repeatableMissionId]));
    } else {
      return _mnRepeatableMissionsTable.updateBatch(
          QueryParams(
              whereString: 'repeatableMissionId=?',
              whereArguments: [repeatableMissionId]),
          {'isDeleted': 1});
    }
  }

  /// Recover RepeatableMissionsTable

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  @override
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    debugPrint(
        'SQFENTITIY: recover RepeatableMissionsTable invoked (repeatableMissionId=$repeatableMissionId)');
    {
      return _mnRepeatableMissionsTable.updateBatch(
          QueryParams(
              whereString: 'repeatableMissionId=?',
              whereArguments: [repeatableMissionId]),
          {'isDeleted': 0});
    }
  }

  @override
  RepeatableMissionsTableFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return RepeatableMissionsTableFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  RepeatableMissionsTableFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return RepeatableMissionsTableFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    completed = completed ?? false;
    archived = archived ?? false;
    isDeleted = isDeleted ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      repeatableMissionId = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion repeatablemissionstable

// region RepeatableMissionsTableField
class RepeatableMissionsTableField extends FilterBase {
  RepeatableMissionsTableField(
      RepeatableMissionsTableFilterBuilder repeatablemissionstableFB)
      : super(repeatablemissionstableFB);

  @override
  RepeatableMissionsTableFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as RepeatableMissionsTableFilterBuilder;
  }

  @override
  RepeatableMissionsTableFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as RepeatableMissionsTableFilterBuilder;
  }

  @override
  RepeatableMissionsTableFilterBuilder isNull() {
    return super.isNull() as RepeatableMissionsTableFilterBuilder;
  }

  @override
  RepeatableMissionsTableFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as RepeatableMissionsTableFilterBuilder;
  }

  @override
  RepeatableMissionsTableFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as RepeatableMissionsTableFilterBuilder;
  }

  @override
  RepeatableMissionsTableFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as RepeatableMissionsTableFilterBuilder;
  }

  @override
  RepeatableMissionsTableFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as RepeatableMissionsTableFilterBuilder;
  }

  @override
  RepeatableMissionsTableFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as RepeatableMissionsTableFilterBuilder;
  }

  @override
  RepeatableMissionsTableFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as RepeatableMissionsTableFilterBuilder;
  }

  @override
  RepeatableMissionsTableFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue)
        as RepeatableMissionsTableFilterBuilder;
  }

  @override
  RepeatableMissionsTableFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue)
        as RepeatableMissionsTableFilterBuilder;
  }

  @override
  RepeatableMissionsTableFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as RepeatableMissionsTableFilterBuilder;
  }

  @override
  RepeatableMissionsTableField get not {
    return super.not as RepeatableMissionsTableField;
  }
}
// endregion RepeatableMissionsTableField

// region RepeatableMissionsTableFilterBuilder
class RepeatableMissionsTableFilterBuilder extends ConjunctionBase {
  RepeatableMissionsTableFilterBuilder(
      RepeatableMissionsTable obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnRepeatableMissionsTable = obj._mnRepeatableMissionsTable;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  RepeatableMissionsTableManager? _mnRepeatableMissionsTable;

  /// put the sql keyword 'AND'
  @override
  RepeatableMissionsTableFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  RepeatableMissionsTableFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  RepeatableMissionsTableFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  RepeatableMissionsTableFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  RepeatableMissionsTableFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  RepeatableMissionsTableFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  RepeatableMissionsTableFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  RepeatableMissionsTableFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  RepeatableMissionsTableFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  RepeatableMissionsTableFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  RepeatableMissionsTableFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  RepeatableMissionsTableField _setField(
      RepeatableMissionsTableField? field, String colName, DbType dbtype) {
    return RepeatableMissionsTableField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  RepeatableMissionsTableField? _repeatableMissionId;
  RepeatableMissionsTableField get repeatableMissionId {
    return _repeatableMissionId =
        _setField(_repeatableMissionId, 'repeatableMissionId', DbType.integer);
  }

  RepeatableMissionsTableField? _missionName;
  RepeatableMissionsTableField get missionName {
    return _missionName = _setField(_missionName, 'missionName', DbType.text);
  }

  RepeatableMissionsTableField? _missionTime;
  RepeatableMissionsTableField get missionTime {
    return _missionTime = _setField(_missionTime, 'missionTime', DbType.text);
  }

  RepeatableMissionsTableField? _missionDate;
  RepeatableMissionsTableField get missionDate {
    return _missionDate = _setField(_missionDate, 'missionDate', DbType.text);
  }

  RepeatableMissionsTableField? _missionRepeat;
  RepeatableMissionsTableField get missionRepeat {
    return _missionRepeat =
        _setField(_missionRepeat, 'missionRepeat', DbType.text);
  }

  RepeatableMissionsTableField? _missionDescription;
  RepeatableMissionsTableField get missionDescription {
    return _missionDescription =
        _setField(_missionDescription, 'missionDescription', DbType.text);
  }

  RepeatableMissionsTableField? _missionLocationName;
  RepeatableMissionsTableField get missionLocationName {
    return _missionLocationName =
        _setField(_missionLocationName, 'missionLocationName', DbType.text);
  }

  RepeatableMissionsTableField? _missionLocationId;
  RepeatableMissionsTableField get missionLocationId {
    return _missionLocationId =
        _setField(_missionLocationId, 'missionLocationId', DbType.text);
  }

  RepeatableMissionsTableField? _missionLocationLat;
  RepeatableMissionsTableField get missionLocationLat {
    return _missionLocationLat =
        _setField(_missionLocationLat, 'missionLocationLat', DbType.text);
  }

  RepeatableMissionsTableField? _missionLocationLng;
  RepeatableMissionsTableField get missionLocationLng {
    return _missionLocationLng =
        _setField(_missionLocationLng, 'missionLocationLng', DbType.text);
  }

  RepeatableMissionsTableField? _missionRecordPath;
  RepeatableMissionsTableField get missionRecordPath {
    return _missionRecordPath =
        _setField(_missionRecordPath, 'missionRecordPath', DbType.text);
  }

  RepeatableMissionsTableField? _completed;
  RepeatableMissionsTableField get completed {
    return _completed = _setField(_completed, 'completed', DbType.bool);
  }

  RepeatableMissionsTableField? _archived;
  RepeatableMissionsTableField get archived {
    return _archived = _setField(_archived, 'archived', DbType.bool);
  }

  RepeatableMissionsTableField? _isDeleted;
  RepeatableMissionsTableField get isDeleted {
    return _isDeleted = _setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  /// Deletes List<RepeatableMissionsTable> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnRepeatableMissionsTable!
          .updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnRepeatableMissionsTable!.delete(qparams);
    }
    return r;
  }

  /// Recover List<RepeatableMissionsTable> bulk by query
  @override
  Future<BoolResult> recover() async {
    buildParameters(getIsDeleted: true);
    debugPrint('SQFENTITIY: recover RepeatableMissionsTable bulk invoked');
    return _mnRepeatableMissionsTable!.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'repeatableMissionId IN (SELECT repeatableMissionId from repeatableMissionsTable ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnRepeatableMissionsTable!.updateBatch(qparams, values);
  }

  /// This method always returns [RepeatableMissionsTable] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> RepeatableMissionsTable?
  @override
  Future<RepeatableMissionsTable?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnRepeatableMissionsTable!.toList(qparams);
    final data = await objFuture;
    RepeatableMissionsTable? obj;
    if (data.isNotEmpty) {
      obj = RepeatableMissionsTable.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [RepeatableMissionsTable]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> RepeatableMissionsTable?
  @override
  Future<RepeatableMissionsTable> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        RepeatableMissionsTable();
  }

  /// This method returns int. [RepeatableMissionsTable]
  /// <returns>int
  @override
  Future<int> toCount(
      [VoidCallback Function(int c)? repeatablemissionstableCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final repeatablemissionstablesFuture =
        await _mnRepeatableMissionsTable!.toList(qparams);
    final int count = repeatablemissionstablesFuture[0]['CNT'] as int;
    if (repeatablemissionstableCount != null) {
      repeatablemissionstableCount(count);
    }
    return count;
  }

  /// This method returns List<RepeatableMissionsTable> [RepeatableMissionsTable]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<RepeatableMissionsTable>
  @override
  Future<List<RepeatableMissionsTable>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<RepeatableMissionsTable> repeatablemissionstablesData =
        await RepeatableMissionsTable.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return repeatablemissionstablesData;
  }

  /// This method returns Json String [RepeatableMissionsTable]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [RepeatableMissionsTable]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [RepeatableMissionsTable]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnRepeatableMissionsTable!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [RepeatableMissionsTable]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `repeatableMissionId` FROM repeatableMissionsTable WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> repeatableMissionIdData = <int>[];
    qparams.selectColumns = ['repeatableMissionId'];
    final repeatableMissionIdFuture =
        await _mnRepeatableMissionsTable!.toList(qparams);

    final int count = repeatableMissionIdFuture.length;
    for (int i = 0; i < count; i++) {
      repeatableMissionIdData
          .add(repeatableMissionIdFuture[i]['repeatableMissionId'] as int);
    }
    return repeatableMissionIdData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [RepeatableMissionsTable]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnRepeatableMissionsTable!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await RepeatableMissionsTable.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnRepeatableMissionsTable!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion RepeatableMissionsTableFilterBuilder

// region RepeatableMissionsTableFields
class RepeatableMissionsTableFields {
  static TableField? _fRepeatableMissionId;
  static TableField get repeatableMissionId {
    return _fRepeatableMissionId = _fRepeatableMissionId ??
        SqlSyntax.setField(
            _fRepeatableMissionId, 'repeatablemissionid', DbType.integer);
  }

  static TableField? _fMissionName;
  static TableField get missionName {
    return _fMissionName = _fMissionName ??
        SqlSyntax.setField(_fMissionName, 'missionName', DbType.text);
  }

  static TableField? _fMissionTime;
  static TableField get missionTime {
    return _fMissionTime = _fMissionTime ??
        SqlSyntax.setField(_fMissionTime, 'missionTime', DbType.text);
  }

  static TableField? _fMissionDate;
  static TableField get missionDate {
    return _fMissionDate = _fMissionDate ??
        SqlSyntax.setField(_fMissionDate, 'missionDate', DbType.text);
  }

  static TableField? _fMissionRepeat;
  static TableField get missionRepeat {
    return _fMissionRepeat = _fMissionRepeat ??
        SqlSyntax.setField(_fMissionRepeat, 'missionRepeat', DbType.text);
  }

  static TableField? _fMissionDescription;
  static TableField get missionDescription {
    return _fMissionDescription = _fMissionDescription ??
        SqlSyntax.setField(
            _fMissionDescription, 'missionDescription', DbType.text);
  }

  static TableField? _fMissionLocationName;
  static TableField get missionLocationName {
    return _fMissionLocationName = _fMissionLocationName ??
        SqlSyntax.setField(
            _fMissionLocationName, 'missionLocationName', DbType.text);
  }

  static TableField? _fMissionLocationId;
  static TableField get missionLocationId {
    return _fMissionLocationId = _fMissionLocationId ??
        SqlSyntax.setField(
            _fMissionLocationId, 'missionLocationId', DbType.text);
  }

  static TableField? _fMissionLocationLat;
  static TableField get missionLocationLat {
    return _fMissionLocationLat = _fMissionLocationLat ??
        SqlSyntax.setField(
            _fMissionLocationLat, 'missionLocationLat', DbType.text);
  }

  static TableField? _fMissionLocationLng;
  static TableField get missionLocationLng {
    return _fMissionLocationLng = _fMissionLocationLng ??
        SqlSyntax.setField(
            _fMissionLocationLng, 'missionLocationLng', DbType.text);
  }

  static TableField? _fMissionRecordPath;
  static TableField get missionRecordPath {
    return _fMissionRecordPath = _fMissionRecordPath ??
        SqlSyntax.setField(
            _fMissionRecordPath, 'missionRecordPath', DbType.text);
  }

  static TableField? _fCompleted;
  static TableField get completed {
    return _fCompleted = _fCompleted ??
        SqlSyntax.setField(_fCompleted, 'completed', DbType.bool);
  }

  static TableField? _fArchived;
  static TableField get archived {
    return _fArchived =
        _fArchived ?? SqlSyntax.setField(_fArchived, 'archived', DbType.bool);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion RepeatableMissionsTableFields

//region RepeatableMissionsTableManager
class RepeatableMissionsTableManager extends SqfEntityProvider {
  RepeatableMissionsTableManager()
      : super(MyAppDatabaseModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'repeatableMissionsTable';
  static const List<String> _primaryKeyList = ['repeatableMissionId'];
  static const String _whereStr = 'repeatableMissionId=?';
}

//endregion RepeatableMissionsTableManager
// region WeekdaysMission
class WeekdaysMission extends TableBase {
  WeekdaysMission(
      {this.id,
      this.weekdayName,
      this.missionName,
      this.missionTime,
      this.missionDate,
      this.missionLocationId,
      this.missionLocationName,
      this.missionLocationLat,
      this.missionLocationLng,
      this.missionDescription,
      this.missionRecordPath,
      this.completed,
      this.isDeleted}) {
    _setDefaultValues();
    softDeleteActivated = true;
  }
  WeekdaysMission.withFields(
      this.weekdayName,
      this.missionName,
      this.missionTime,
      this.missionDate,
      this.missionLocationId,
      this.missionLocationName,
      this.missionLocationLat,
      this.missionLocationLng,
      this.missionDescription,
      this.missionRecordPath,
      this.completed,
      this.isDeleted) {
    _setDefaultValues();
  }
  WeekdaysMission.withId(
      this.id,
      this.weekdayName,
      this.missionName,
      this.missionTime,
      this.missionDate,
      this.missionLocationId,
      this.missionLocationName,
      this.missionLocationLat,
      this.missionLocationLng,
      this.missionDescription,
      this.missionRecordPath,
      this.completed,
      this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  WeekdaysMission.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['weekdayName'] != null) {
      weekdayName = o['weekdayName'].toString();
    }
    if (o['missionName'] != null) {
      missionName = o['missionName'].toString();
    }
    if (o['missionTime'] != null) {
      missionTime = o['missionTime'].toString();
    }
    if (o['missionDate'] != null) {
      missionDate = o['missionDate'].toString();
    }
    if (o['missionLocationId'] != null) {
      missionLocationId = o['missionLocationId'].toString();
    }
    if (o['missionLocationName'] != null) {
      missionLocationName = o['missionLocationName'].toString();
    }
    if (o['missionLocationLat'] != null) {
      missionLocationLat = o['missionLocationLat'].toString();
    }
    if (o['missionLocationLng'] != null) {
      missionLocationLng = o['missionLocationLng'].toString();
    }
    if (o['missionDescription'] != null) {
      missionDescription = o['missionDescription'].toString();
    }
    if (o['missionRecordPath'] != null) {
      missionRecordPath = o['missionRecordPath'].toString();
    }
    if (o['completed'] != null) {
      completed = o['completed'].toString() == '1' ||
          o['completed'].toString() == 'true';
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (WeekdaysMission)
  int? id;
  String? weekdayName;
  String? missionName;
  String? missionTime;
  String? missionDate;
  String? missionLocationId;
  String? missionLocationName;
  String? missionLocationLat;
  String? missionLocationLng;
  String? missionDescription;
  String? missionRecordPath;
  bool? completed;
  bool? isDeleted;

  // end FIELDS (WeekdaysMission)

  static const bool _softDeleteActivated = true;
  WeekdaysMissionManager? __mnWeekdaysMission;

  WeekdaysMissionManager get _mnWeekdaysMission {
    return __mnWeekdaysMission =
        __mnWeekdaysMission ?? WeekdaysMissionManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (weekdayName != null || !forView) {
      map['weekdayName'] = weekdayName;
    }
    if (missionName != null || !forView) {
      map['missionName'] = missionName;
    }
    if (missionTime != null || !forView) {
      map['missionTime'] = missionTime;
    }
    if (missionDate != null || !forView) {
      map['missionDate'] = missionDate;
    }
    if (missionLocationId != null || !forView) {
      map['missionLocationId'] = missionLocationId;
    }
    if (missionLocationName != null || !forView) {
      map['missionLocationName'] = missionLocationName;
    }
    if (missionLocationLat != null || !forView) {
      map['missionLocationLat'] = missionLocationLat;
    }
    if (missionLocationLng != null || !forView) {
      map['missionLocationLng'] = missionLocationLng;
    }
    if (missionDescription != null || !forView) {
      map['missionDescription'] = missionDescription;
    }
    if (missionRecordPath != null || !forView) {
      map['missionRecordPath'] = missionRecordPath;
    }
    if (completed != null) {
      map['completed'] = forQuery ? (completed! ? 1 : 0) : completed;
    } else if (completed != null || !forView) {
      map['completed'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (weekdayName != null || !forView) {
      map['weekdayName'] = weekdayName;
    }
    if (missionName != null || !forView) {
      map['missionName'] = missionName;
    }
    if (missionTime != null || !forView) {
      map['missionTime'] = missionTime;
    }
    if (missionDate != null || !forView) {
      map['missionDate'] = missionDate;
    }
    if (missionLocationId != null || !forView) {
      map['missionLocationId'] = missionLocationId;
    }
    if (missionLocationName != null || !forView) {
      map['missionLocationName'] = missionLocationName;
    }
    if (missionLocationLat != null || !forView) {
      map['missionLocationLat'] = missionLocationLat;
    }
    if (missionLocationLng != null || !forView) {
      map['missionLocationLng'] = missionLocationLng;
    }
    if (missionDescription != null || !forView) {
      map['missionDescription'] = missionDescription;
    }
    if (missionRecordPath != null || !forView) {
      map['missionRecordPath'] = missionRecordPath;
    }
    if (completed != null) {
      map['completed'] = forQuery ? (completed! ? 1 : 0) : completed;
    } else if (completed != null || !forView) {
      map['completed'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [WeekdaysMission]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [WeekdaysMission]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      weekdayName,
      missionName,
      missionTime,
      missionDate,
      missionLocationId,
      missionLocationName,
      missionLocationLat,
      missionLocationLng,
      missionDescription,
      missionRecordPath,
      completed,
      isDeleted
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      weekdayName,
      missionName,
      missionTime,
      missionDate,
      missionLocationId,
      missionLocationName,
      missionLocationLat,
      missionLocationLng,
      missionDescription,
      missionRecordPath,
      completed,
      isDeleted
    ];
  }

  static Future<List<WeekdaysMission>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR WeekdaysMission.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<WeekdaysMission>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <WeekdaysMission>[];
    try {
      objList = list
          .map((weekdaysmission) =>
              WeekdaysMission.fromMap(weekdaysmission as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR WeekdaysMission.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<WeekdaysMission>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<WeekdaysMission> objList = <WeekdaysMission>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = WeekdaysMission.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns WeekdaysMission by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [WeekdaysMission] if exist, otherwise returns null
  Future<WeekdaysMission?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    WeekdaysMission? obj;
    final data = await _mnWeekdaysMission.getById([id]);
    if (data.length != 0) {
      obj = WeekdaysMission.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (WeekdaysMission) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnWeekdaysMission.insert(this, ignoreBatch);
    } else {
      await _mnWeekdaysMission.update(this);
    }

    return id;
  }

  /// Saves the (WeekdaysMission) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnWeekdaysMission.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnWeekdaysMission.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs WeekdaysMission. Returns a new Primary Key value of WeekdaysMission

  /// <returns>Returns a new Primary Key value of WeekdaysMission
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<WeekdaysMission> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<WeekdaysMission> weekdaysmissions,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyAppDatabaseModel().batchStart();
    for (final obj in weekdaysmissions) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyAppDatabaseModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < weekdaysmissions.length; i++) {
        if (weekdaysmissions[i].id == null) {
          weekdaysmissions[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnWeekdaysMission.rawInsert(
          'INSERT OR REPLACE INTO weekdaysMissions (id, weekdayName, missionName, missionTime, missionDate, missionLocationId, missionLocationName, missionLocationLat, missionLocationLng, missionDescription, missionRecordPath, completed,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            id,
            weekdayName,
            missionName,
            missionTime,
            missionDate,
            missionLocationId,
            missionLocationName,
            missionLocationLat,
            missionLocationLng,
            missionDescription,
            missionRecordPath,
            completed,
            isDeleted
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'WeekdaysMission id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'WeekdaysMission id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'WeekdaysMission Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<WeekdaysMission>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<WeekdaysMission> weekdaysmissions,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnWeekdaysMission.rawInsertAll(
        'INSERT OR REPLACE INTO weekdaysMissions (id, weekdayName, missionName, missionTime, missionDate, missionLocationId, missionLocationName, missionLocationLat, missionLocationLng, missionDescription, missionRecordPath, completed,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)',
        weekdaysmissions,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes WeekdaysMission

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete WeekdaysMission invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnWeekdaysMission
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnWeekdaysMission.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover WeekdaysMission

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  @override
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    debugPrint('SQFENTITIY: recover WeekdaysMission invoked (id=$id)');
    {
      return _mnWeekdaysMission.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  @override
  WeekdaysMissionFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return WeekdaysMissionFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  WeekdaysMissionFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return WeekdaysMissionFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    completed = completed ?? false;
    isDeleted = isDeleted ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion weekdaysmission

// region WeekdaysMissionField
class WeekdaysMissionField extends FilterBase {
  WeekdaysMissionField(WeekdaysMissionFilterBuilder weekdaysmissionFB)
      : super(weekdaysmissionFB);

  @override
  WeekdaysMissionFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as WeekdaysMissionFilterBuilder;
  }

  @override
  WeekdaysMissionFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as WeekdaysMissionFilterBuilder;
  }

  @override
  WeekdaysMissionFilterBuilder isNull() {
    return super.isNull() as WeekdaysMissionFilterBuilder;
  }

  @override
  WeekdaysMissionFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as WeekdaysMissionFilterBuilder;
  }

  @override
  WeekdaysMissionFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as WeekdaysMissionFilterBuilder;
  }

  @override
  WeekdaysMissionFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as WeekdaysMissionFilterBuilder;
  }

  @override
  WeekdaysMissionFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as WeekdaysMissionFilterBuilder;
  }

  @override
  WeekdaysMissionFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as WeekdaysMissionFilterBuilder;
  }

  @override
  WeekdaysMissionFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as WeekdaysMissionFilterBuilder;
  }

  @override
  WeekdaysMissionFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as WeekdaysMissionFilterBuilder;
  }

  @override
  WeekdaysMissionFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as WeekdaysMissionFilterBuilder;
  }

  @override
  WeekdaysMissionFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as WeekdaysMissionFilterBuilder;
  }

  @override
  WeekdaysMissionField get not {
    return super.not as WeekdaysMissionField;
  }
}
// endregion WeekdaysMissionField

// region WeekdaysMissionFilterBuilder
class WeekdaysMissionFilterBuilder extends ConjunctionBase {
  WeekdaysMissionFilterBuilder(WeekdaysMission obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnWeekdaysMission = obj._mnWeekdaysMission;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  WeekdaysMissionManager? _mnWeekdaysMission;

  /// put the sql keyword 'AND'
  @override
  WeekdaysMissionFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  WeekdaysMissionFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  WeekdaysMissionFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  WeekdaysMissionFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  WeekdaysMissionFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  WeekdaysMissionFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  WeekdaysMissionFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  WeekdaysMissionFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  WeekdaysMissionFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  WeekdaysMissionFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  WeekdaysMissionFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  WeekdaysMissionField _setField(
      WeekdaysMissionField? field, String colName, DbType dbtype) {
    return WeekdaysMissionField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  WeekdaysMissionField? _id;
  WeekdaysMissionField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  WeekdaysMissionField? _weekdayName;
  WeekdaysMissionField get weekdayName {
    return _weekdayName = _setField(_weekdayName, 'weekdayName', DbType.text);
  }

  WeekdaysMissionField? _missionName;
  WeekdaysMissionField get missionName {
    return _missionName = _setField(_missionName, 'missionName', DbType.text);
  }

  WeekdaysMissionField? _missionTime;
  WeekdaysMissionField get missionTime {
    return _missionTime = _setField(_missionTime, 'missionTime', DbType.text);
  }

  WeekdaysMissionField? _missionDate;
  WeekdaysMissionField get missionDate {
    return _missionDate = _setField(_missionDate, 'missionDate', DbType.text);
  }

  WeekdaysMissionField? _missionLocationId;
  WeekdaysMissionField get missionLocationId {
    return _missionLocationId =
        _setField(_missionLocationId, 'missionLocationId', DbType.text);
  }

  WeekdaysMissionField? _missionLocationName;
  WeekdaysMissionField get missionLocationName {
    return _missionLocationName =
        _setField(_missionLocationName, 'missionLocationName', DbType.text);
  }

  WeekdaysMissionField? _missionLocationLat;
  WeekdaysMissionField get missionLocationLat {
    return _missionLocationLat =
        _setField(_missionLocationLat, 'missionLocationLat', DbType.text);
  }

  WeekdaysMissionField? _missionLocationLng;
  WeekdaysMissionField get missionLocationLng {
    return _missionLocationLng =
        _setField(_missionLocationLng, 'missionLocationLng', DbType.text);
  }

  WeekdaysMissionField? _missionDescription;
  WeekdaysMissionField get missionDescription {
    return _missionDescription =
        _setField(_missionDescription, 'missionDescription', DbType.text);
  }

  WeekdaysMissionField? _missionRecordPath;
  WeekdaysMissionField get missionRecordPath {
    return _missionRecordPath =
        _setField(_missionRecordPath, 'missionRecordPath', DbType.text);
  }

  WeekdaysMissionField? _completed;
  WeekdaysMissionField get completed {
    return _completed = _setField(_completed, 'completed', DbType.bool);
  }

  WeekdaysMissionField? _isDeleted;
  WeekdaysMissionField get isDeleted {
    return _isDeleted = _setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  /// Deletes List<WeekdaysMission> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnWeekdaysMission!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnWeekdaysMission!.delete(qparams);
    }
    return r;
  }

  /// Recover List<WeekdaysMission> bulk by query
  @override
  Future<BoolResult> recover() async {
    buildParameters(getIsDeleted: true);
    debugPrint('SQFENTITIY: recover WeekdaysMission bulk invoked');
    return _mnWeekdaysMission!.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from weekdaysMissions ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnWeekdaysMission!.updateBatch(qparams, values);
  }

  /// This method always returns [WeekdaysMission] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> WeekdaysMission?
  @override
  Future<WeekdaysMission?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnWeekdaysMission!.toList(qparams);
    final data = await objFuture;
    WeekdaysMission? obj;
    if (data.isNotEmpty) {
      obj = WeekdaysMission.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [WeekdaysMission]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> WeekdaysMission?
  @override
  Future<WeekdaysMission> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        WeekdaysMission();
  }

  /// This method returns int. [WeekdaysMission]
  /// <returns>int
  @override
  Future<int> toCount(
      [VoidCallback Function(int c)? weekdaysmissionCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final weekdaysmissionsFuture = await _mnWeekdaysMission!.toList(qparams);
    final int count = weekdaysmissionsFuture[0]['CNT'] as int;
    if (weekdaysmissionCount != null) {
      weekdaysmissionCount(count);
    }
    return count;
  }

  /// This method returns List<WeekdaysMission> [WeekdaysMission]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<WeekdaysMission>
  @override
  Future<List<WeekdaysMission>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<WeekdaysMission> weekdaysmissionsData =
        await WeekdaysMission.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return weekdaysmissionsData;
  }

  /// This method returns Json String [WeekdaysMission]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [WeekdaysMission]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [WeekdaysMission]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnWeekdaysMission!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [WeekdaysMission]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM weekdaysMissions WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnWeekdaysMission!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [WeekdaysMission]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnWeekdaysMission!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await WeekdaysMission.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnWeekdaysMission!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion WeekdaysMissionFilterBuilder

// region WeekdaysMissionFields
class WeekdaysMissionFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fWeekdayName;
  static TableField get weekdayName {
    return _fWeekdayName = _fWeekdayName ??
        SqlSyntax.setField(_fWeekdayName, 'weekdayName', DbType.text);
  }

  static TableField? _fMissionName;
  static TableField get missionName {
    return _fMissionName = _fMissionName ??
        SqlSyntax.setField(_fMissionName, 'missionName', DbType.text);
  }

  static TableField? _fMissionTime;
  static TableField get missionTime {
    return _fMissionTime = _fMissionTime ??
        SqlSyntax.setField(_fMissionTime, 'missionTime', DbType.text);
  }

  static TableField? _fMissionDate;
  static TableField get missionDate {
    return _fMissionDate = _fMissionDate ??
        SqlSyntax.setField(_fMissionDate, 'missionDate', DbType.text);
  }

  static TableField? _fMissionLocationId;
  static TableField get missionLocationId {
    return _fMissionLocationId = _fMissionLocationId ??
        SqlSyntax.setField(
            _fMissionLocationId, 'missionLocationId', DbType.text);
  }

  static TableField? _fMissionLocationName;
  static TableField get missionLocationName {
    return _fMissionLocationName = _fMissionLocationName ??
        SqlSyntax.setField(
            _fMissionLocationName, 'missionLocationName', DbType.text);
  }

  static TableField? _fMissionLocationLat;
  static TableField get missionLocationLat {
    return _fMissionLocationLat = _fMissionLocationLat ??
        SqlSyntax.setField(
            _fMissionLocationLat, 'missionLocationLat', DbType.text);
  }

  static TableField? _fMissionLocationLng;
  static TableField get missionLocationLng {
    return _fMissionLocationLng = _fMissionLocationLng ??
        SqlSyntax.setField(
            _fMissionLocationLng, 'missionLocationLng', DbType.text);
  }

  static TableField? _fMissionDescription;
  static TableField get missionDescription {
    return _fMissionDescription = _fMissionDescription ??
        SqlSyntax.setField(
            _fMissionDescription, 'missionDescription', DbType.text);
  }

  static TableField? _fMissionRecordPath;
  static TableField get missionRecordPath {
    return _fMissionRecordPath = _fMissionRecordPath ??
        SqlSyntax.setField(
            _fMissionRecordPath, 'missionRecordPath', DbType.text);
  }

  static TableField? _fCompleted;
  static TableField get completed {
    return _fCompleted = _fCompleted ??
        SqlSyntax.setField(_fCompleted, 'completed', DbType.bool);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion WeekdaysMissionFields

//region WeekdaysMissionManager
class WeekdaysMissionManager extends SqfEntityProvider {
  WeekdaysMissionManager()
      : super(MyAppDatabaseModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'weekdaysMissions';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion WeekdaysMissionManager
// region FaceDataTable
class FaceDataTable extends TableBase {
  FaceDataTable(
      {this.id,
      this.facePoints,
      this.leftEyebrowTop,
      this.leftEyebrowBottom,
      this.rightEyebrowTop,
      this.rightEyebrowBottom,
      this.leftEye,
      this.rightEye,
      this.upperLipTop,
      this.lowerLipTop,
      this.noseBridge,
      this.noseBottom,
      this.leftCheek,
      this.rightCheek,
      this.userName,
      this.userRelation,
      this.completed,
      this.isDeleted}) {
    _setDefaultValues();
    softDeleteActivated = true;
  }
  FaceDataTable.withFields(
      this.facePoints,
      this.leftEyebrowTop,
      this.leftEyebrowBottom,
      this.rightEyebrowTop,
      this.rightEyebrowBottom,
      this.leftEye,
      this.rightEye,
      this.upperLipTop,
      this.lowerLipTop,
      this.noseBridge,
      this.noseBottom,
      this.leftCheek,
      this.rightCheek,
      this.userName,
      this.userRelation,
      this.completed,
      this.isDeleted) {
    _setDefaultValues();
  }
  FaceDataTable.withId(
      this.id,
      this.facePoints,
      this.leftEyebrowTop,
      this.leftEyebrowBottom,
      this.rightEyebrowTop,
      this.rightEyebrowBottom,
      this.leftEye,
      this.rightEye,
      this.upperLipTop,
      this.lowerLipTop,
      this.noseBridge,
      this.noseBottom,
      this.leftCheek,
      this.rightCheek,
      this.userName,
      this.userRelation,
      this.completed,
      this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  FaceDataTable.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['facePoints'] != null) {
      facePoints = o['facePoints'].toString();
    }
    if (o['leftEyebrowTop'] != null) {
      leftEyebrowTop = o['leftEyebrowTop'].toString();
    }
    if (o['leftEyebrowBottom'] != null) {
      leftEyebrowBottom = o['leftEyebrowBottom'].toString();
    }
    if (o['rightEyebrowTop'] != null) {
      rightEyebrowTop = o['rightEyebrowTop'].toString();
    }
    if (o['rightEyebrowBottom'] != null) {
      rightEyebrowBottom = o['rightEyebrowBottom'].toString();
    }
    if (o['leftEye'] != null) {
      leftEye = o['leftEye'].toString();
    }
    if (o['rightEye'] != null) {
      rightEye = o['rightEye'].toString();
    }
    if (o['upperLipTop'] != null) {
      upperLipTop = o['upperLipTop'].toString();
    }
    if (o['lowerLipTop'] != null) {
      lowerLipTop = o['lowerLipTop'].toString();
    }
    if (o['noseBridge'] != null) {
      noseBridge = o['noseBridge'].toString();
    }
    if (o['noseBottom'] != null) {
      noseBottom = o['noseBottom'].toString();
    }
    if (o['leftCheek'] != null) {
      leftCheek = o['leftCheek'].toString();
    }
    if (o['rightCheek'] != null) {
      rightCheek = o['rightCheek'].toString();
    }
    if (o['userName'] != null) {
      userName = o['userName'].toString();
    }
    if (o['userRelation '] != null) {
      userRelation = o['userRelation '].toString();
    }
    if (o['completed'] != null) {
      completed = o['completed'].toString() == '1' ||
          o['completed'].toString() == 'true';
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (FaceDataTable)
  int? id;
  String? facePoints;
  String? leftEyebrowTop;
  String? leftEyebrowBottom;
  String? rightEyebrowTop;
  String? rightEyebrowBottom;
  String? leftEye;
  String? rightEye;
  String? upperLipTop;
  String? lowerLipTop;
  String? noseBridge;
  String? noseBottom;
  String? leftCheek;
  String? rightCheek;
  String? userName;
  String? userRelation;
  bool? completed;
  bool? isDeleted;

  // end FIELDS (FaceDataTable)

  static const bool _softDeleteActivated = true;
  FaceDataTableManager? __mnFaceDataTable;

  FaceDataTableManager get _mnFaceDataTable {
    return __mnFaceDataTable = __mnFaceDataTable ?? FaceDataTableManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (facePoints != null || !forView) {
      map['facePoints'] = facePoints;
    }
    if (leftEyebrowTop != null || !forView) {
      map['leftEyebrowTop'] = leftEyebrowTop;
    }
    if (leftEyebrowBottom != null || !forView) {
      map['leftEyebrowBottom'] = leftEyebrowBottom;
    }
    if (rightEyebrowTop != null || !forView) {
      map['rightEyebrowTop'] = rightEyebrowTop;
    }
    if (rightEyebrowBottom != null || !forView) {
      map['rightEyebrowBottom'] = rightEyebrowBottom;
    }
    if (leftEye != null || !forView) {
      map['leftEye'] = leftEye;
    }
    if (rightEye != null || !forView) {
      map['rightEye'] = rightEye;
    }
    if (upperLipTop != null || !forView) {
      map['upperLipTop'] = upperLipTop;
    }
    if (lowerLipTop != null || !forView) {
      map['lowerLipTop'] = lowerLipTop;
    }
    if (noseBridge != null || !forView) {
      map['noseBridge'] = noseBridge;
    }
    if (noseBottom != null || !forView) {
      map['noseBottom'] = noseBottom;
    }
    if (leftCheek != null || !forView) {
      map['leftCheek'] = leftCheek;
    }
    if (rightCheek != null || !forView) {
      map['rightCheek'] = rightCheek;
    }
    if (userName != null || !forView) {
      map['userName'] = userName;
    }
    if (userRelation != null || !forView) {
      map['userRelation '] = userRelation;
    }
    if (completed != null) {
      map['completed'] = forQuery ? (completed! ? 1 : 0) : completed;
    } else if (completed != null || !forView) {
      map['completed'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (facePoints != null || !forView) {
      map['facePoints'] = facePoints;
    }
    if (leftEyebrowTop != null || !forView) {
      map['leftEyebrowTop'] = leftEyebrowTop;
    }
    if (leftEyebrowBottom != null || !forView) {
      map['leftEyebrowBottom'] = leftEyebrowBottom;
    }
    if (rightEyebrowTop != null || !forView) {
      map['rightEyebrowTop'] = rightEyebrowTop;
    }
    if (rightEyebrowBottom != null || !forView) {
      map['rightEyebrowBottom'] = rightEyebrowBottom;
    }
    if (leftEye != null || !forView) {
      map['leftEye'] = leftEye;
    }
    if (rightEye != null || !forView) {
      map['rightEye'] = rightEye;
    }
    if (upperLipTop != null || !forView) {
      map['upperLipTop'] = upperLipTop;
    }
    if (lowerLipTop != null || !forView) {
      map['lowerLipTop'] = lowerLipTop;
    }
    if (noseBridge != null || !forView) {
      map['noseBridge'] = noseBridge;
    }
    if (noseBottom != null || !forView) {
      map['noseBottom'] = noseBottom;
    }
    if (leftCheek != null || !forView) {
      map['leftCheek'] = leftCheek;
    }
    if (rightCheek != null || !forView) {
      map['rightCheek'] = rightCheek;
    }
    if (userName != null || !forView) {
      map['userName'] = userName;
    }
    if (userRelation != null || !forView) {
      map['userRelation '] = userRelation;
    }
    if (completed != null) {
      map['completed'] = forQuery ? (completed! ? 1 : 0) : completed;
    } else if (completed != null || !forView) {
      map['completed'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [FaceDataTable]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [FaceDataTable]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      facePoints,
      leftEyebrowTop,
      leftEyebrowBottom,
      rightEyebrowTop,
      rightEyebrowBottom,
      leftEye,
      rightEye,
      upperLipTop,
      lowerLipTop,
      noseBridge,
      noseBottom,
      leftCheek,
      rightCheek,
      userName,
      userRelation,
      completed,
      isDeleted
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      facePoints,
      leftEyebrowTop,
      leftEyebrowBottom,
      rightEyebrowTop,
      rightEyebrowBottom,
      leftEye,
      rightEye,
      upperLipTop,
      lowerLipTop,
      noseBridge,
      noseBottom,
      leftCheek,
      rightCheek,
      userName,
      userRelation,
      completed,
      isDeleted
    ];
  }

  static Future<List<FaceDataTable>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR FaceDataTable.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<FaceDataTable>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <FaceDataTable>[];
    try {
      objList = list
          .map((facedatatable) =>
              FaceDataTable.fromMap(facedatatable as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR FaceDataTable.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<FaceDataTable>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<FaceDataTable> objList = <FaceDataTable>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = FaceDataTable.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns FaceDataTable by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [FaceDataTable] if exist, otherwise returns null
  Future<FaceDataTable?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    FaceDataTable? obj;
    final data = await _mnFaceDataTable.getById([id]);
    if (data.length != 0) {
      obj = FaceDataTable.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (FaceDataTable) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnFaceDataTable.insert(this, ignoreBatch);
    } else {
      await _mnFaceDataTable.update(this);
    }

    return id;
  }

  /// Saves the (FaceDataTable) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnFaceDataTable.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnFaceDataTable.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs FaceDataTable. Returns a new Primary Key value of FaceDataTable

  /// <returns>Returns a new Primary Key value of FaceDataTable
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<FaceDataTable> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<FaceDataTable> facedatatables,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyAppDatabaseModel().batchStart();
    for (final obj in facedatatables) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyAppDatabaseModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < facedatatables.length; i++) {
        if (facedatatables[i].id == null) {
          facedatatables[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnFaceDataTable.rawInsert(
          'INSERT OR REPLACE INTO faceDataTable (id, facePoints, leftEyebrowTop, leftEyebrowBottom, rightEyebrowTop, rightEyebrowBottom, leftEye, rightEye, upperLipTop, lowerLipTop, noseBridge, noseBottom, leftCheek, rightCheek, userName, userRelation , completed,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            id,
            facePoints,
            leftEyebrowTop,
            leftEyebrowBottom,
            rightEyebrowTop,
            rightEyebrowBottom,
            leftEye,
            rightEye,
            upperLipTop,
            lowerLipTop,
            noseBridge,
            noseBottom,
            leftCheek,
            rightCheek,
            userName,
            userRelation,
            completed,
            isDeleted
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'FaceDataTable id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'FaceDataTable id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'FaceDataTable Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<FaceDataTable>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<FaceDataTable> facedatatables,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnFaceDataTable.rawInsertAll(
        'INSERT OR REPLACE INTO faceDataTable (id, facePoints, leftEyebrowTop, leftEyebrowBottom, rightEyebrowTop, rightEyebrowBottom, leftEye, rightEye, upperLipTop, lowerLipTop, noseBridge, noseBottom, leftCheek, rightCheek, userName, userRelation , completed,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
        facedatatables,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes FaceDataTable

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete FaceDataTable invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnFaceDataTable
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnFaceDataTable.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover FaceDataTable

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  @override
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    debugPrint('SQFENTITIY: recover FaceDataTable invoked (id=$id)');
    {
      return _mnFaceDataTable.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  @override
  FaceDataTableFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return FaceDataTableFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  FaceDataTableFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return FaceDataTableFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    completed = completed ?? false;
    isDeleted = isDeleted ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion facedatatable

// region FaceDataTableField
class FaceDataTableField extends FilterBase {
  FaceDataTableField(FaceDataTableFilterBuilder facedatatableFB)
      : super(facedatatableFB);

  @override
  FaceDataTableFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as FaceDataTableFilterBuilder;
  }

  @override
  FaceDataTableFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as FaceDataTableFilterBuilder;
  }

  @override
  FaceDataTableFilterBuilder isNull() {
    return super.isNull() as FaceDataTableFilterBuilder;
  }

  @override
  FaceDataTableFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as FaceDataTableFilterBuilder;
  }

  @override
  FaceDataTableFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as FaceDataTableFilterBuilder;
  }

  @override
  FaceDataTableFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as FaceDataTableFilterBuilder;
  }

  @override
  FaceDataTableFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as FaceDataTableFilterBuilder;
  }

  @override
  FaceDataTableFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as FaceDataTableFilterBuilder;
  }

  @override
  FaceDataTableFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as FaceDataTableFilterBuilder;
  }

  @override
  FaceDataTableFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as FaceDataTableFilterBuilder;
  }

  @override
  FaceDataTableFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as FaceDataTableFilterBuilder;
  }

  @override
  FaceDataTableFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as FaceDataTableFilterBuilder;
  }

  @override
  FaceDataTableField get not {
    return super.not as FaceDataTableField;
  }
}
// endregion FaceDataTableField

// region FaceDataTableFilterBuilder
class FaceDataTableFilterBuilder extends ConjunctionBase {
  FaceDataTableFilterBuilder(FaceDataTable obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnFaceDataTable = obj._mnFaceDataTable;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  FaceDataTableManager? _mnFaceDataTable;

  /// put the sql keyword 'AND'
  @override
  FaceDataTableFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  FaceDataTableFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  FaceDataTableFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  FaceDataTableFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  FaceDataTableFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  FaceDataTableFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  FaceDataTableFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  FaceDataTableFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  FaceDataTableFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  FaceDataTableFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  FaceDataTableFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  FaceDataTableField _setField(
      FaceDataTableField? field, String colName, DbType dbtype) {
    return FaceDataTableField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  FaceDataTableField? _id;
  FaceDataTableField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  FaceDataTableField? _facePoints;
  FaceDataTableField get facePoints {
    return _facePoints = _setField(_facePoints, 'facePoints', DbType.text);
  }

  FaceDataTableField? _leftEyebrowTop;
  FaceDataTableField get leftEyebrowTop {
    return _leftEyebrowTop =
        _setField(_leftEyebrowTop, 'leftEyebrowTop', DbType.text);
  }

  FaceDataTableField? _leftEyebrowBottom;
  FaceDataTableField get leftEyebrowBottom {
    return _leftEyebrowBottom =
        _setField(_leftEyebrowBottom, 'leftEyebrowBottom', DbType.text);
  }

  FaceDataTableField? _rightEyebrowTop;
  FaceDataTableField get rightEyebrowTop {
    return _rightEyebrowTop =
        _setField(_rightEyebrowTop, 'rightEyebrowTop', DbType.text);
  }

  FaceDataTableField? _rightEyebrowBottom;
  FaceDataTableField get rightEyebrowBottom {
    return _rightEyebrowBottom =
        _setField(_rightEyebrowBottom, 'rightEyebrowBottom', DbType.text);
  }

  FaceDataTableField? _leftEye;
  FaceDataTableField get leftEye {
    return _leftEye = _setField(_leftEye, 'leftEye', DbType.text);
  }

  FaceDataTableField? _rightEye;
  FaceDataTableField get rightEye {
    return _rightEye = _setField(_rightEye, 'rightEye', DbType.text);
  }

  FaceDataTableField? _upperLipTop;
  FaceDataTableField get upperLipTop {
    return _upperLipTop = _setField(_upperLipTop, 'upperLipTop', DbType.text);
  }

  FaceDataTableField? _lowerLipTop;
  FaceDataTableField get lowerLipTop {
    return _lowerLipTop = _setField(_lowerLipTop, 'lowerLipTop', DbType.text);
  }

  FaceDataTableField? _noseBridge;
  FaceDataTableField get noseBridge {
    return _noseBridge = _setField(_noseBridge, 'noseBridge', DbType.text);
  }

  FaceDataTableField? _noseBottom;
  FaceDataTableField get noseBottom {
    return _noseBottom = _setField(_noseBottom, 'noseBottom', DbType.text);
  }

  FaceDataTableField? _leftCheek;
  FaceDataTableField get leftCheek {
    return _leftCheek = _setField(_leftCheek, 'leftCheek', DbType.text);
  }

  FaceDataTableField? _rightCheek;
  FaceDataTableField get rightCheek {
    return _rightCheek = _setField(_rightCheek, 'rightCheek', DbType.text);
  }

  FaceDataTableField? _userName;
  FaceDataTableField get userName {
    return _userName = _setField(_userName, 'userName', DbType.text);
  }

  FaceDataTableField? _userRelation;
  FaceDataTableField get userRelation {
    return _userRelation =
        _setField(_userRelation, 'userRelation ', DbType.text);
  }

  FaceDataTableField? _completed;
  FaceDataTableField get completed {
    return _completed = _setField(_completed, 'completed', DbType.bool);
  }

  FaceDataTableField? _isDeleted;
  FaceDataTableField get isDeleted {
    return _isDeleted = _setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  /// Deletes List<FaceDataTable> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnFaceDataTable!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnFaceDataTable!.delete(qparams);
    }
    return r;
  }

  /// Recover List<FaceDataTable> bulk by query
  @override
  Future<BoolResult> recover() async {
    buildParameters(getIsDeleted: true);
    debugPrint('SQFENTITIY: recover FaceDataTable bulk invoked');
    return _mnFaceDataTable!.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from faceDataTable ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnFaceDataTable!.updateBatch(qparams, values);
  }

  /// This method always returns [FaceDataTable] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> FaceDataTable?
  @override
  Future<FaceDataTable?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnFaceDataTable!.toList(qparams);
    final data = await objFuture;
    FaceDataTable? obj;
    if (data.isNotEmpty) {
      obj = FaceDataTable.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [FaceDataTable]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> FaceDataTable?
  @override
  Future<FaceDataTable> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        FaceDataTable();
  }

  /// This method returns int. [FaceDataTable]
  /// <returns>int
  @override
  Future<int> toCount(
      [VoidCallback Function(int c)? facedatatableCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final facedatatablesFuture = await _mnFaceDataTable!.toList(qparams);
    final int count = facedatatablesFuture[0]['CNT'] as int;
    if (facedatatableCount != null) {
      facedatatableCount(count);
    }
    return count;
  }

  /// This method returns List<FaceDataTable> [FaceDataTable]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<FaceDataTable>
  @override
  Future<List<FaceDataTable>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<FaceDataTable> facedatatablesData =
        await FaceDataTable.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return facedatatablesData;
  }

  /// This method returns Json String [FaceDataTable]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [FaceDataTable]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [FaceDataTable]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnFaceDataTable!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [FaceDataTable]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM faceDataTable WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnFaceDataTable!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [FaceDataTable]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnFaceDataTable!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await FaceDataTable.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnFaceDataTable!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion FaceDataTableFilterBuilder

// region FaceDataTableFields
class FaceDataTableFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fFacePoints;
  static TableField get facePoints {
    return _fFacePoints = _fFacePoints ??
        SqlSyntax.setField(_fFacePoints, 'facePoints', DbType.text);
  }

  static TableField? _fLeftEyebrowTop;
  static TableField get leftEyebrowTop {
    return _fLeftEyebrowTop = _fLeftEyebrowTop ??
        SqlSyntax.setField(_fLeftEyebrowTop, 'leftEyebrowTop', DbType.text);
  }

  static TableField? _fLeftEyebrowBottom;
  static TableField get leftEyebrowBottom {
    return _fLeftEyebrowBottom = _fLeftEyebrowBottom ??
        SqlSyntax.setField(
            _fLeftEyebrowBottom, 'leftEyebrowBottom', DbType.text);
  }

  static TableField? _fRightEyebrowTop;
  static TableField get rightEyebrowTop {
    return _fRightEyebrowTop = _fRightEyebrowTop ??
        SqlSyntax.setField(_fRightEyebrowTop, 'rightEyebrowTop', DbType.text);
  }

  static TableField? _fRightEyebrowBottom;
  static TableField get rightEyebrowBottom {
    return _fRightEyebrowBottom = _fRightEyebrowBottom ??
        SqlSyntax.setField(
            _fRightEyebrowBottom, 'rightEyebrowBottom', DbType.text);
  }

  static TableField? _fLeftEye;
  static TableField get leftEye {
    return _fLeftEye =
        _fLeftEye ?? SqlSyntax.setField(_fLeftEye, 'leftEye', DbType.text);
  }

  static TableField? _fRightEye;
  static TableField get rightEye {
    return _fRightEye =
        _fRightEye ?? SqlSyntax.setField(_fRightEye, 'rightEye', DbType.text);
  }

  static TableField? _fUpperLipTop;
  static TableField get upperLipTop {
    return _fUpperLipTop = _fUpperLipTop ??
        SqlSyntax.setField(_fUpperLipTop, 'upperLipTop', DbType.text);
  }

  static TableField? _fLowerLipTop;
  static TableField get lowerLipTop {
    return _fLowerLipTop = _fLowerLipTop ??
        SqlSyntax.setField(_fLowerLipTop, 'lowerLipTop', DbType.text);
  }

  static TableField? _fNoseBridge;
  static TableField get noseBridge {
    return _fNoseBridge = _fNoseBridge ??
        SqlSyntax.setField(_fNoseBridge, 'noseBridge', DbType.text);
  }

  static TableField? _fNoseBottom;
  static TableField get noseBottom {
    return _fNoseBottom = _fNoseBottom ??
        SqlSyntax.setField(_fNoseBottom, 'noseBottom', DbType.text);
  }

  static TableField? _fLeftCheek;
  static TableField get leftCheek {
    return _fLeftCheek = _fLeftCheek ??
        SqlSyntax.setField(_fLeftCheek, 'leftCheek', DbType.text);
  }

  static TableField? _fRightCheek;
  static TableField get rightCheek {
    return _fRightCheek = _fRightCheek ??
        SqlSyntax.setField(_fRightCheek, 'rightCheek', DbType.text);
  }

  static TableField? _fUserName;
  static TableField get userName {
    return _fUserName =
        _fUserName ?? SqlSyntax.setField(_fUserName, 'userName', DbType.text);
  }

  static TableField? _fUserRelation;
  static TableField get userRelation {
    return _fUserRelation = _fUserRelation ??
        SqlSyntax.setField(_fUserRelation, 'userRelation ', DbType.text);
  }

  static TableField? _fCompleted;
  static TableField get completed {
    return _fCompleted = _fCompleted ??
        SqlSyntax.setField(_fCompleted, 'completed', DbType.bool);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion FaceDataTableFields

//region FaceDataTableManager
class FaceDataTableManager extends SqfEntityProvider {
  FaceDataTableManager()
      : super(MyAppDatabaseModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'faceDataTable';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion FaceDataTableManager
/// Region SEQUENCE IdentitySequence
class IdentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback Function(int o)? nextval]) async {
    final val = await MyAppDatabaseModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback Function(int o)? currentval]) async {
    final val = await MyAppDatabaseModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback Function(int o)? currentval]) async {
    final val = await MyAppDatabaseModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false, reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE IdentitySequence

class MyAppDatabaseModelSequenceManager extends SqfEntityProvider {
  MyAppDatabaseModelSequenceManager() : super(MyAppDatabaseModel());
}
// END OF ENTITIES
